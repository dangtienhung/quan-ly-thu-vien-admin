import { Button } from '@/components/ui/button';
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useUploadImage } from '@/hooks/images';
import type { Author } from '@/types/authors';
import type { CreateBookRequest } from '@/types/books';
import type { Category } from '@/types/categories';
import type { Publisher } from '@/types/publishers';
import { zodResolver } from '@hookform/resolvers/zod';
import { IconUpload, IconX } from '@tabler/icons-react';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { toast } from 'sonner';
import { z } from 'zod';

const createBookSchema = z.object({
	title: z
		.string()
		.min(1, 'T√™n s√°ch l√† b·∫Øt bu·ªôc')
		.max(255, 'T√™n s√°ch t·ªëi ƒëa 255 k√Ω t·ª±'),
	isbn: z.string().min(1, 'ISBN l√† b·∫Øt bu·ªôc').max(20, 'ISBN t·ªëi ƒëa 20 k√Ω t·ª±'),
	publish_year: z
		.number()
		.min(1900, 'NƒÉm xu·∫•t b·∫£n ph·∫£i t·ª´ 1900')
		.max(
			new Date().getFullYear() + 1,
			'NƒÉm xu·∫•t b·∫£n kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n nƒÉm hi·ªán t·∫°i'
		),
	edition: z
		.string()
		.min(1, 'Phi√™n b·∫£n l√† b·∫Øt bu·ªôc')
		.max(50, 'Phi√™n b·∫£n t·ªëi ƒëa 50 k√Ω t·ª±'),
	description: z.string().optional(),
	cover_image: z
		.string()
		.min(1, '·∫¢nh b√¨a l√† b·∫Øt bu·ªôc')
		.url('URL ·∫£nh b√¨a kh√¥ng h·ª£p l·ªá'),
	language: z
		.string()
		.min(1, 'Ng√¥n ng·ªØ l√† b·∫Øt bu·ªôc')
		.max(50, 'Ng√¥n ng·ªØ t·ªëi ƒëa 50 k√Ω t·ª±'),
	page_count: z
		.number()
		.min(1, 'S·ªë trang ph·∫£i l·ªõn h∆°n 0')
		.max(10000, 'S·ªë trang t·ªëi ƒëa 10000'),
	book_type: z.enum(['physical', 'ebook']),
	physical_type: z.enum(['library_use', 'borrowable']),
	publisher_id: z.string().min(1, 'Nh√† xu·∫•t b·∫£n l√† b·∫Øt bu·ªôc'),
	category_id: z.string().min(1, 'Th·ªÉ lo·∫°i l√† b·∫Øt bu·ªôc'),
	author_ids: z.array(z.string()).optional(),
});

type CreateBookFormData = z.infer<typeof createBookSchema>;

interface CreateBookFormProps {
	onSubmit: (data: CreateBookRequest) => void;
	onCancel: () => void;
	isLoading?: boolean;
	categories?: Category[];
	publishers?: Publisher[];
	authors?: Author[];
}

const CreateBookForm = ({
	onSubmit,
	onCancel,
	isLoading = false,
	categories = [],
	publishers = [],
	authors = [],
}: CreateBookFormProps) => {
	const [selectedFile, setSelectedFile] = useState<File | null>(null);
	const [previewUrl, setPreviewUrl] = useState<string>('');
	console.log('üöÄ ~ CreateBookForm ~ previewUrl:', previewUrl);

	const { uploadImage, isUploading: isUploadingImage } = useUploadImage({
		onSuccess: (image) => {
			form.setValue('cover_image', image.cloudinaryUrl);
			setPreviewUrl(image.cloudinaryUrl);
			setSelectedFile(null);
			// Clear any validation errors for cover_image
			form.clearErrors('cover_image');
		},
		onError: (error) => {
			// Set validation error for cover_image
			form.setError('cover_image', {
				type: 'manual',
				message: 'Upload ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.',
			});
		},
	});

	const form = useForm<CreateBookFormData>({
		resolver: zodResolver(createBookSchema),
		defaultValues: {
			title: '',
			isbn: '',
			publish_year: new Date().getFullYear(),
			edition: '1st',
			description: '',
			cover_image: '',
			language: 'Ti·∫øng Vi·ªát',
			page_count: 1,
			book_type: 'physical',
			physical_type: 'borrowable',
			publisher_id: '',
			category_id: '',
			author_ids: [],
		},
	});

	const handleSubmit = (data: CreateBookFormData) => {
		// Check if cover image is uploaded
		if (!data.cover_image) {
			form.setError('cover_image', {
				type: 'manual',
				message: 'Vui l√≤ng upload ·∫£nh b√¨a tr∆∞·ªõc khi t·∫°o s√°ch.',
			});
			return;
		}

		onSubmit({
			...data,
			description: data.description || undefined,
			author_ids: data.author_ids || undefined,
		});
	};

	const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
		const file = event.target.files?.[0];
		if (file) {
			setSelectedFile(file);
			const url = URL.createObjectURL(file);
			setPreviewUrl(url);
		}
	};

	const handleUploadImage = () => {
		if (selectedFile) {
			console.log('üîÑ Starting upload for file:', selectedFile.name);
			uploadImage(selectedFile);
		} else {
			console.warn('‚ö†Ô∏è No file selected for upload');
			toast.error('Vui l√≤ng ch·ªçn file ·∫£nh tr∆∞·ªõc khi upload');
		}
	};

	const handleRemoveImage = () => {
		setSelectedFile(null);
		setPreviewUrl('');
		form.setValue('cover_image', '');
	};

	const bookType = form.watch('book_type');

	return (
		<Form {...form}>
			<form
				onSubmit={form.handleSubmit(handleSubmit)}
				className="space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto pr-2"
			>
				<FormField
					control={form.control}
					name="title"
					render={({ field }) => (
						<FormItem>
							<FormLabel>T√™n s√°ch *</FormLabel>
							<FormControl>
								<Input placeholder="Nh·∫≠p t√™n s√°ch" {...field} />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="isbn"
					render={({ field }) => (
						<FormItem>
							<FormLabel>ISBN *</FormLabel>
							<FormControl>
								<Input placeholder="Nh·∫≠p ISBN" {...field} />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="publish_year"
					render={({ field }) => (
						<FormItem>
							<FormLabel>NƒÉm xu·∫•t b·∫£n *</FormLabel>
							<FormControl>
								<Input
									type="number"
									placeholder="2024"
									className="w-full"
									{...field}
									onChange={(e) => field.onChange(Number(e.target.value))}
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="edition"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Phi√™n b·∫£n *</FormLabel>
							<FormControl>
								<Input placeholder="1st" className="w-full" {...field} />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="language"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Ng√¥n ng·ªØ *</FormLabel>
							<FormControl>
								<Input placeholder="Ti·∫øng Vi·ªát" className="w-full" {...field} />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="page_count"
					render={({ field }) => (
						<FormItem>
							<FormLabel>S·ªë trang *</FormLabel>
							<FormControl>
								<Input
									type="number"
									placeholder="300"
									className="w-full"
									{...field}
									onChange={(e) => field.onChange(Number(e.target.value))}
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="book_type"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Lo·∫°i s√°ch *</FormLabel>
							<Select onValueChange={field.onChange} value={field.value}>
								<FormControl>
									<SelectTrigger className="w-full">
										<SelectValue placeholder="Ch·ªçn lo·∫°i s√°ch" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									<SelectItem value="physical">S√°ch v·∫≠t l√Ω</SelectItem>
									<SelectItem value="ebook">S√°ch ƒëi·ªán t·ª≠</SelectItem>
								</SelectContent>
							</Select>
							<FormMessage />
						</FormItem>
					)}
				/>

				{bookType === 'physical' && (
					<FormField
						control={form.control}
						name="physical_type"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Lo·∫°i v·∫≠t l√Ω *</FormLabel>
								<Select onValueChange={field.onChange} value={field.value}>
									<FormControl>
										<SelectTrigger className="w-full">
											<SelectValue placeholder="Ch·ªçn lo·∫°i v·∫≠t l√Ω" />
										</SelectTrigger>
									</FormControl>
									<SelectContent>
										<SelectItem value="borrowable">C√≥ th·ªÉ m∆∞·ª£n</SelectItem>
										<SelectItem value="library_use">
											Ch·ªâ ƒë·ªçc t·∫°i th∆∞ vi·ªán
										</SelectItem>
									</SelectContent>
								</Select>
								<FormMessage />
							</FormItem>
						)}
					/>
				)}

				<FormField
					control={form.control}
					name="publisher_id"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Nh√† xu·∫•t b·∫£n *</FormLabel>
							<Select onValueChange={field.onChange} value={field.value}>
								<FormControl>
									<SelectTrigger className="w-full">
										<SelectValue placeholder="Ch·ªçn nh√† xu·∫•t b·∫£n" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									{publishers.map((publisher) => (
										<SelectItem key={publisher.id} value={publisher.id}>
											{publisher.publisherName}
										</SelectItem>
									))}
								</SelectContent>
							</Select>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="category_id"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Th·ªÉ lo·∫°i *</FormLabel>
							<Select onValueChange={field.onChange} value={field.value}>
								<FormControl>
									<SelectTrigger className="w-full">
										<SelectValue placeholder="Ch·ªçn th·ªÉ lo·∫°i" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									{categories.map((category) => (
										<SelectItem key={category.id} value={category.id}>
											{category.category_name}
										</SelectItem>
									))}
								</SelectContent>
							</Select>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="author_ids"
					render={({ field }) => (
						<FormItem>
							<FormLabel>T√°c gi·∫£</FormLabel>
							<Select
								onValueChange={(value) => {
									const currentIds = field.value || [];
									if (!currentIds.includes(value)) {
										field.onChange([...currentIds, value]);
									}
								}}
							>
								<FormControl>
									<SelectTrigger className="w-full">
										<SelectValue placeholder="Ch·ªçn t√°c gi·∫£" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									{authors.map((author) => (
										<SelectItem key={author.id} value={author.id}>
											{author.author_name}
										</SelectItem>
									))}
								</SelectContent>
							</Select>
							{field.value && field.value.length > 0 && (
								<div className="mt-2 space-y-1">
									{field.value.map((authorId) => {
										const author = authors.find((a) => a.id === authorId);
										return (
											<div
												key={authorId}
												className="flex items-center justify-between bg-muted p-2 rounded"
											>
												<span className="text-sm">{author?.author_name}</span>
												<Button
													type="button"
													variant="ghost"
													size="sm"
													onClick={() => {
														field.onChange(
															field.value?.filter((id) => id !== authorId)
														);
													}}
													className="h-6 w-6 p-0"
												>
													<IconX className="h-3 w-3" />
												</Button>
											</div>
										);
									})}
								</div>
							)}
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="cover_image"
					render={({ field }) => (
						<FormItem>
							<FormLabel>·∫¢nh b√¨a *</FormLabel>
							<FormControl>
								<div className="space-y-2">
									<div className="flex items-center space-x-2">
										<Input
											type="file"
											accept="image/*"
											onChange={handleFileChange}
											className="flex-1 w-full"
										/>
										{selectedFile && (
											<Button
												type="button"
												onClick={handleUploadImage}
												disabled={isUploadingImage}
												className="flex items-center space-x-1"
											>
												<IconUpload className="h-4 w-4" />
												{isUploadingImage ? 'ƒêang upload...' : 'Upload'}
											</Button>
										)}
										{(previewUrl || field.value) && (
											<Button
												type="button"
												variant="outline"
												onClick={handleRemoveImage}
												className="flex items-center space-x-1"
											>
												<IconX className="h-4 w-4" />
												X√≥a
											</Button>
										)}
									</div>
									{(previewUrl || field.value) && (
										<div className="relative w-32 h-32 border rounded overflow-hidden">
											<img
												src={previewUrl || field.value}
												alt="Preview"
												className="w-full h-full object-cover"
											/>
										</div>
									)}
									{/* <Input
										placeholder="Ho·∫∑c nh·∫≠p URL ·∫£nh b√¨a"
										{...field}
										onChange={(e) => {
											field.onChange(e.target.value);
											setPreviewUrl(e.target.value);
										}}
									/> */}
								</div>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="description"
					render={({ field }) => (
						<FormItem>
							<FormLabel>M√¥ t·∫£</FormLabel>
							<FormControl>
								<Textarea
									placeholder="Nh·∫≠p m√¥ t·∫£ v·ªÅ s√°ch"
									className="resize-none w-full"
									rows={4}
									{...field}
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<div className="flex justify-end space-x-2 pt-4">
					<Button type="button" variant="outline" onClick={onCancel}>
						H·ªßy
					</Button>
					<Button type="submit" disabled={isLoading || isUploadingImage}>
						{isLoading ? 'ƒêang t·∫°o...' : 'T·∫°o s√°ch'}
					</Button>
				</div>
			</form>
		</Form>
	);
};

export default CreateBookForm;
