import { Card, CardContent } from '@/components/ui/card';
import {
	useApproveBorrowRecord,
	useBorrowRecordsByStatus,
} from '@/hooks/borrow-records';
import {
	useCancelReservation,
	useCreateReservation,
	useDeleteReservation,
	useFulfillReservation,
	useReservationStats,
	useReservationStatsByStatus,
	useReservations,
	useReservationsExpiringSoon,
} from '@/hooks/reservations';
import type {
	Reservation,
	ReservationExpiringSoonItem,
} from '@/types/reservations';
import { useEffect, useState } from 'react';
import {
	CreateReservationDialog,
	DeleteReservationDialog,
	ReservationDetailsDialog,
	ReservationStats,
	ReservationTabs,
} from './components';

import { NotificationsAPI } from '@/apis';
import { BorrowRecordsAPI } from '@/apis/borrow-records';
import { PhysicalCopiesAPI } from '@/apis/physical-copies';
import { ReservationsAPI } from '@/apis/reservations';
import { useExpireReservation } from '@/hooks/reservations/use-exprice-revations';
import { useQueryParams } from '@/hooks/useQueryParam';
import { useGetProfile } from '@/hooks/users/use-get-profile';
import { useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';

export default function ReservationsPage() {
	const [searchQuery, setSearchQuery] = useState('');
	const [selectedStatus, setSelectedStatus] = useState<string>('pending');
	const [activeTab, setActiveTab] = useState('pending');
	const [showCreateDialog, setShowCreateDialog] = useState(false);
	const [showDeleteDialog, setShowDeleteDialog] = useState(false);
	const [reservationToDelete, setReservationToDelete] =
		useState<Reservation | null>(null);
	const [showDetailsDialog, setShowDetailsDialog] = useState(false);
	const [selectedReservationId, setSelectedReservationId] = useState<
		string | null
	>(null);

	const { data: user } = useGetProfile();
	const queryParams = useQueryParams();
	const currentStatus = queryParams.status || 'pending';

	const queryClient = useQueryClient();
	const { approveBorrowRecord, isApproving } = useApproveBorrowRecord();

	// Fetch reservations data
	const { reservations, isLoading: isLoadingReservations } = useReservations({
		page: 1,
		limit: 20,
		searchQuery: searchQuery || undefined,
	});

	// Hook cho filter theo status
	const {
		borrowRecords: statusRecords,
		meta: statusMeta,
		isLoading: isLoadingStatus,
	} = useBorrowRecordsByStatus({
		params: {
			status: 'pending_approval',
			page: 1,
			limit: 1000,
		},
		enabled: true, // Lu√¥n enable ƒë·ªÉ ph·∫£n ·ª©ng v·ªõi thay ƒë·ªïi params
	});

	// Fetch expiring soon reservations (1 ng√†y t·ªõi)
	const { reservations: expiringSoonReservations } =
		useReservationsExpiringSoon({
			days: 1,
			enabled: activeTab === 'expiring',
		});

	// Fetch statistics
	const { stats } = useReservationStats();
	const { stats: statusStats } = useReservationStatsByStatus();

	// Mutations
	const createReservationMutation = useCreateReservation();
	const fulfillReservationMutation = useFulfillReservation();
	const cancelReservationMutation = useCancelReservation();
	const deleteReservationMutation = useDeleteReservation();
	const expireReservationMutation = useExpireReservation();

	// Logic ki·ªÉm tra ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n - ch·ªâ check khi ·ªü tab "pending"
	const hasExpiredReservations =
		currentStatus === 'pending' &&
		(statusStats?.expired || 0) > 0 &&
		reservations.some(
			(reservation) =>
				reservation.status === 'pending' &&
				new Date(reservation.expiry_date) < new Date()
		);

	// Logic ch·∫∑n thao t√°c khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
	const isBlockedByExpiredReservations = hasExpiredReservations;

	// Th√¥ng b√°o c·∫£nh b√°o khi c√≥ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
	useEffect(() => {
		if (hasExpiredReservations) {
			toast.warning('üö® C√ì ƒê·∫∂T TR∆Ø·ªöC QU√Å H·∫†N!', {
				description:
					'B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc khi c√≥ th·ªÉ thao t√°c v·ªõi c√°c ƒë·∫∑t tr∆∞·ªõc c√≤n h·∫°n.',
				duration: hasExpiredReservations ? Infinity : 5000,
			});
		}
	}, [hasExpiredReservations]);

	// T·ª± ƒë·ªông chuy·ªÉn tab khi c√≥ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
	useEffect(() => {
		if (hasExpiredReservations && activeTab !== 'expired') {
			setActiveTab('expired');
		}
	}, [hasExpiredReservations, activeTab]);

	const handleSearch = (value: string) => {
		setSearchQuery(value);
	};

	const handleStatusFilter = (status: string) => {
		setSelectedStatus(status);
	};

	const handleExpireReservation = (reservationId: string) => {
		// Hi·ªÉn th·ªã th√¥ng b√°o b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
		const mainLoadingToast = toast.loading(
			'ƒêang ƒë√°nh d·∫•u ƒë·∫∑t tr∆∞·ªõc h·∫øt h·∫°n...'
		);

		expireReservationMutation.mutate(
			{
				id: reservationId,
				librarianId: user?.id || '',
				reason: `ƒê√°nh d·∫•u h·∫øt h·∫°n b·ªüi th·ªß th∆∞ ${user?.username}`,
			},
			{
				onSuccess: async (response) => {
					toast.success('ƒê√°nh d·∫•u ƒë·∫∑t tr∆∞·ªõc h·∫øt h·∫°n th√†nh c√¥ng!');

					// T√¨m reservation ƒë√£ b·ªã expire ƒë·ªÉ l·∫•y th√¥ng tin
					const expiredReservation = reservations.find(
						(r) => r.id === reservationId
					);
					if (!expiredReservation) {
						console.error('Kh√¥ng t√¨m th·∫•y reservation ƒë√£ expire');
						toast.dismiss(mainLoadingToast);
						return;
					}

					try {
						// 1. T√¨m borrow record t∆∞∆°ng ·ª©ng v·ªõi reservation n√†y
						const relatedBorrowRecord = statusRecords.find((record) => {
							return (
								expiredReservation.reader_id === record.reader_id &&
								expiredReservation.book_id === record.physicalCopy?.book_id &&
								expiredReservation.physical_copy_id === record.physicalCopy?.id
							);
						});

						if (relatedBorrowRecord) {
							// 2. Update borrow record status th√†nh 'cancelled'
							await BorrowRecordsAPI.update(relatedBorrowRecord.id, {
								status: 'cancelled',
								return_notes: `ƒê·∫∑t tr∆∞·ªõc ƒë√£ h·∫øt h·∫°n - ${user?.username}`,
							});

							// 3. Update physical copy status th√†nh 'available' n·∫øu c√≥
							if (expiredReservation.physical_copy_id) {
								await PhysicalCopiesAPI.updateStatus(
									expiredReservation.physical_copy_id,
									{
										status: 'available',
										notes: `ƒê·∫∑t tr∆∞·ªõc ƒë√£ h·∫øt h·∫°n - Tr·∫£ v·ªÅ tr·∫°ng th√°i s·∫µn s√†ng`,
									}
								);
							}

							// 4. G·ª≠i th√¥ng b√°o cho ƒë·ªôc gi·∫£ v·ªÅ vi·ªác ƒë·∫∑t tr∆∞·ªõc ƒë√£ h·∫øt h·∫°n
							try {
								NotificationsAPI.sendReminders({
									readerId: expiredReservation.reader_id,
									customMessage: `Xin ch√†o! ƒê·∫∑t tr∆∞·ªõc s√°ch "${expiredReservation.book?.title}" c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. S√°ch s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ kho v√† c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc l·∫°i n·∫øu c·∫ßn thi·∫øt.`,
								});
							} catch (error) {
								console.error('L·ªói g·ª≠i th√¥ng b√°o:', error);
								toast.warning(
									'ƒê√£ ƒë√°nh d·∫•u h·∫øt h·∫°n nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ƒë·ªôc gi·∫£.'
								);
							}
						}

						// 5. Invalidate queries ƒë·ªÉ refresh data
						queryClient.invalidateQueries({ queryKey: ['reservations'] });
						queryClient.invalidateQueries({ queryKey: ['borrow-records'] });
						queryClient.invalidateQueries({ queryKey: ['physical-copies'] });
						queryClient.invalidateQueries({
							queryKey: [
								'borrow-records-by-status',
								{
									status: 'pending_approval',
									page: 1,
									limit: 1000,
								},
							],
						});

						// Dismiss main loading toast
						toast.dismiss(mainLoadingToast);

						// Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
						toast.success(`ƒê√£ ƒë√°nh d·∫•u h·∫øt h·∫°n ƒë·∫∑t tr∆∞·ªõc th√†nh c√¥ng!`, {
							duration: 5000,
							description: (
								<div className="mt-2 space-y-1 text-sm">
									<div>
										<strong>ƒê·ªôc gi·∫£:</strong>{' '}
										{expiredReservation.reader?.fullName || 'N/A'}
									</div>
									<div>
										<strong>S√°ch:</strong>{' '}
										{expiredReservation.book?.title || 'N/A'}
									</div>
									<div className="text-green-600">
										‚úì ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i borrow record
									</div>
									<div className="text-green-600">
										‚úì ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i physical copy
									</div>
									<div className="text-green-600">
										‚úì ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn ƒë·ªôc gi·∫£
									</div>
								</div>
							),
						});
					} catch (error) {
						console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
						toast.dismiss(mainLoadingToast);
						toast.error(
							'ƒê√£ ƒë√°nh d·∫•u h·∫øt h·∫°n nh∆∞ng c√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!'
						);
					}
				},
				onError: (error) => {
					console.error('L·ªói khi ƒë√°nh d·∫•u h·∫øt h·∫°n ƒë·∫∑t tr∆∞·ªõc:', error);
					toast.dismiss(mainLoadingToast);
					toast.error('C√≥ l·ªói x·∫£y ra khi ƒë√°nh d·∫•u h·∫øt h·∫°n ƒë·∫∑t tr∆∞·ªõc!');
				},
			}
		);
	};

	const handleCreateReservation = (data: any) => {
		// Ch·∫∑n t·∫°o ƒë·∫∑t tr∆∞·ªõc khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
		if (isBlockedByExpiredReservations) {
			toast.error('Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t tr∆∞·ªõc m·ªõi!', {
				description: 'B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc.',
			});
			return;
		}

		createReservationMutation.mutate(data, {
			onSuccess: () => {
				setShowCreateDialog(false);
				toast.success('T·∫°o ƒë·∫∑t tr∆∞·ªõc th√†nh c√¥ng!');
			},
		});
	};

	const handleFulfillReservation = async (reservationId: string) => {
		// Ch·∫∑n th·ª±c hi·ªán ƒë·∫∑t tr∆∞·ªõc khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
		if (isBlockedByExpiredReservations) {
			toast.error('Kh√¥ng th·ªÉ th·ª±c hi·ªán ƒë·∫∑t tr∆∞·ªõc!', {
				description: 'B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc.',
			});
			return;
		}

		// Hi·ªÉn th·ªã th√¥ng b√°o b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
		const mainLoadingToast = toast.loading('B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·∫∑t tr∆∞·ªõc...');

		const reservation = reservations.find(
			(reservation) => reservation.id === reservationId
		);
		if (reservation) {
			// find borrow record by reservation id
			const borrowRecord = statusRecords.find((record) => {
				return (
					reservation.reader_id === record.reader_id &&
					reservation.book_id === record.physicalCopy?.book_id &&
					reservation.physical_copy_id === record.physicalCopy?.id
				);
			});

			if (borrowRecord) {
				// Approve the borrow record to change status from pending_approval to borrowed
				approveBorrowRecord(
					{
						id: borrowRecord.id,
						data: {
							librarianId: user?.id || '',
							notes: `ƒê·∫∑t tr∆∞·ªõc ƒë∆∞·ª£c th·ª±c hi·ªán - Reservation ID: ${reservation.id} - ${user?.id}`,
						},
					},
					{
						onSuccess: async () => {
							// Fulfill the reservation after approving borrow record
							try {
								await ReservationsAPI.fulfill(reservationId, {
									librarianId: user?.id || '',
									notes: `ƒê·∫∑t tr∆∞·ªõc ƒë∆∞·ª£c th·ª±c hi·ªán - Reservation ID: ${reservation.id} - ${user?.id}`,
								});

								// G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü cho ƒë·ªôc gi·∫£
								const dueDate = new Date();
								dueDate.setDate(dueDate.getDate() + 14); // M·∫∑c ƒë·ªãnh 14 ng√†y

								// Hi·ªÉn th·ªã th√¥ng b√°o ƒëang g·ª≠i
								const loadingToast = toast.loading(
									'ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn ƒë·ªôc gi·∫£...'
								);

								// G·ª≠i th√¥ng b√°o cho ƒë·ªôc gi·∫£ c·ª• th·ªÉ
								try {
									NotificationsAPI.sendReminders({
										readerId: reservation.reader_id,
										customMessage: `Xin ch√†o! ƒê·∫∑t tr∆∞·ªõc s√°ch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng. S√°ch s·∫Ω ƒë∆∞·ª£c giao trong th·ªùi gian s·ªõm nh·∫•t. Ng√†y tr·∫£ d·ª± ki·∫øn: ${dueDate.toLocaleDateString(
											'vi-VN'
										)}. Vui l√≤ng ki·ªÉm tra email ho·∫∑c li√™n h·ªá th∆∞ vi·ªán ƒë·ªÉ nh·∫≠n s√°ch.`,
									});

									// Dismiss loading toast
									toast.dismiss(loadingToast);
								} catch (error) {
									console.error('L·ªói g·ª≠i th√¥ng b√°o:', error);
									toast.dismiss(loadingToast);
									toast.warning(
										'ƒê·∫∑t tr∆∞·ªõc th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ƒë·ªôc gi·∫£. Vui l√≤ng th·ª≠ l·∫°i sau.'
									);
								}

								// Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
								toast.success(`ƒê√£ th·ª±c hi·ªán ƒë·∫∑t tr∆∞·ªõc th√†nh c√¥ng!`, {
									duration: 5000,
									description: (
										<div className="mt-2 space-y-1 text-sm">
											<div>
												<strong>ƒê·ªôc gi·∫£:</strong>{' '}
												{reservation.reader?.fullName || 'N/A'}
											</div>
											<div>
												<strong>S√°ch:</strong>{' '}
												{reservation.book?.title || 'N/A'}
											</div>
											<div>
												<strong>Ng√†y tr·∫£ d·ª± ki·∫øn:</strong>{' '}
												{dueDate.toLocaleDateString('vi-VN')}
											</div>
											<div className="text-green-600">
												‚úì Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªôc gi·∫£
											</div>
										</div>
									),
								});

								// Dismiss main loading toast
								toast.dismiss(mainLoadingToast);

								// Invalidate queries ƒë·ªÉ refresh data
								queryClient.invalidateQueries({ queryKey: ['reservations'] });
								queryClient.invalidateQueries({
									queryKey: ['reservation-stats'],
								});
								queryClient.invalidateQueries({ queryKey: ['borrow-records'] });
								queryClient.invalidateQueries({
									queryKey: ['borrow-records-stats'],
								});
								queryClient.invalidateQueries({
									queryKey: [
										'borrow-records-by-status',
										{
											status: 'pending_approval',
											page: 1,
											limit: 1000,
										},
									],
								});
							} catch (error) {
								console.error('L·ªói th·ª±c hi·ªán ƒë·∫∑t tr∆∞·ªõc:', error);
								toast.dismiss(mainLoadingToast);
								toast.error('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán ƒë·∫∑t tr∆∞·ªõc!', {
									description:
										'Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp t·ª•c.',
								});
							}
						},
						onError: (error: Error) => {
							console.error('L·ªói ph√™ duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch:', error);
							toast.dismiss(mainLoadingToast);
							toast.error('C√≥ l·ªói x·∫£y ra khi ph√™ duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch!', {
								description:
									'Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp t·ª•c.',
							});
						},
					}
				);
			} else {
				toast.dismiss(mainLoadingToast);
				toast.error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n s√°ch t∆∞∆°ng ·ª©ng!', {
					description:
						'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë·∫∑t tr∆∞·ªõc ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.',
				});
			}
		} else {
			toast.dismiss(mainLoadingToast);
			toast.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t tr∆∞·ªõc!', {
				description:
					'Vui l√≤ng ki·ªÉm tra l·∫°i ID ƒë·∫∑t tr∆∞·ªõc ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.',
			});
		}
	};

	const handleCancelReservationExpiring = (data: {
		id: string;
		librarianId: string;
		reason?: string;
	}) => {
		// Cho ph√©p h·ªßy ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n (kh√¥ng ch·∫∑n)
		// Ch·ªâ ch·∫∑n c√°c thao t√°c kh√°c khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n

		cancelReservationMutation.mutate(
			{
				id: data.id,
				librarianId: user?.id || '',
				reason: data.reason || 'H·ªßy b·ªüi th·ªß th∆∞',
			},
			{
				onSuccess: async (response) => {
					toast.success('ƒê√£ h·ªßy ƒë·∫∑t tr∆∞·ªõc th√†nh c√¥ng!');

					// T√¨m reservation ƒë√£ b·ªã h·ªßy ƒë·ªÉ l·∫•y th√¥ng tin
					const cancelledReservation = reservations.find(
						(r) => r.id === data.id
					);
					if (!cancelledReservation) {
						console.error('Kh√¥ng t√¨m th·∫•y reservation ƒë√£ h·ªßy');
						return;
					}

					try {
						// 1. T√¨m borrow record t∆∞∆°ng ·ª©ng v·ªõi reservation n√†y
						const relatedBorrowRecord = statusRecords.find((record) => {
							return (
								cancelledReservation.reader_id === record.reader_id &&
								cancelledReservation.book_id === record.physicalCopy?.book_id &&
								cancelledReservation.physical_copy_id ===
									record.physicalCopy?.id
							);
						});

						if (relatedBorrowRecord) {
							// 2. Update borrow record status th√†nh 'cancelled'
							await BorrowRecordsAPI.update(relatedBorrowRecord.id, {
								status: 'cancelled',
								return_notes: `ƒê·∫∑t tr∆∞·ªõc ƒë√£ b·ªã h·ªßy - ${
									data.reason || 'H·ªßy b·ªüi th·ªß th∆∞'
								}`,
							});

							// 3. Update physical copy status th√†nh 'available' n·∫øu c√≥
							if (cancelledReservation.physical_copy_id) {
								await PhysicalCopiesAPI.updateStatus(
									cancelledReservation.physical_copy_id,
									{
										status: 'available',
										notes: `ƒê·∫∑t tr∆∞·ªõc ƒë√£ b·ªã h·ªßy - Tr·∫£ v·ªÅ tr·∫°ng th√°i s·∫µn s√†ng`,
									}
								);
							}
						}

						// 4. Invalidate queries ƒë·ªÉ refresh data
						queryClient.invalidateQueries({ queryKey: ['reservations'] });
						queryClient.invalidateQueries({ queryKey: ['borrow-records'] });
						queryClient.invalidateQueries({ queryKey: ['physical-copies'] });
					} catch (error) {
						console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
						toast.error(
							'ƒê√£ h·ªßy ƒë·∫∑t tr∆∞·ªõc nh∆∞ng c√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!'
						);
					}
				},
				onError: (error) => {
					console.error('L·ªói khi h·ªßy ƒë·∫∑t tr∆∞·ªõc:', error);
					toast.error('C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë·∫∑t tr∆∞·ªõc!');
				},
			}
		);
	};

	const handleViewDetails = (reservation: Reservation) => {
		// Ch·∫∑n xem chi ti·∫øt khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
		if (isBlockedByExpiredReservations) {
			toast.error('Kh√¥ng th·ªÉ xem chi ti·∫øt!', {
				description: 'B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc.',
			});
			return;
		}

		setSelectedReservationId(reservation.id);
		setShowDetailsDialog(true);
	};

	const handleViewDetailsExpiring = (
		reservation: ReservationExpiringSoonItem
	) => {
		// Ch·∫∑n xem chi ti·∫øt khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
		if (isBlockedByExpiredReservations) {
			toast.error('Kh√¥ng th·ªÉ xem chi ti·∫øt!', {
				description: 'B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc.',
			});
			return;
		}

		setSelectedReservationId(reservation.id);
		setShowDetailsDialog(true);
	};

	const handleDeleteReservation = (reservation: Reservation) => {
		// Ch·∫∑n x√≥a ƒë·∫∑t tr∆∞·ªõc khi c√≤n ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
		if (isBlockedByExpiredReservations) {
			toast.error('Kh√¥ng th·ªÉ x√≥a ƒë·∫∑t tr∆∞·ªõc!', {
				description: 'B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc.',
			});
			return;
		}

		setReservationToDelete(reservation);
		setShowDeleteDialog(true);
	};

	const confirmDeleteReservation = () => {
		if (!reservationToDelete) return;

		deleteReservationMutation.mutate(reservationToDelete.id, {
			onSuccess: () => {
				setShowDeleteDialog(false);
				setReservationToDelete(null);
				toast.success('ƒê√£ x√≥a ƒë·∫∑t tr∆∞·ªõc th√†nh c√¥ng!');
			},
			onError: () => {
				toast.error('C√≥ l·ªói x·∫£y ra khi x√≥a ƒë·∫∑t tr∆∞·ªõc!');
			},
		});
	};

	// Logic filter ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong component ReservationTabs

	// T·ª± ƒë·ªông chuy·ªÉn tab khi c√≥ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n
	useEffect(() => {
		if (hasExpiredReservations && activeTab !== 'expired') {
			setActiveTab('expired');
		}
	}, [hasExpiredReservations, activeTab]);

	// Set default tab to pending if no status in URL
	useEffect(() => {
		if (!queryParams.status) {
			setActiveTab('pending');
			setSelectedStatus('pending');
		} else {
			// ƒê·ªìng b·ªô selectedStatus v·ªõi URL
			setSelectedStatus(queryParams.status);
			setActiveTab(queryParams.status);
		}
	}, [queryParams.status]);

	return (
		<div className="space-y-6">
			{/* Header */}
			<div className="flex justify-between items-center">
				<div>
					<h1 className="text-3xl font-bold">Qu·∫£n l√Ω ƒê·∫∑t Tr∆∞·ªõc</h1>
					<p className="text-muted-foreground">
						Theo d√µi v√† qu·∫£n l√Ω c√°c y√™u c·∫ßu ƒë·∫∑t tr∆∞·ªõc s√°ch trong th∆∞ vi·ªán
					</p>
				</div>
				{/* <Button onClick={() => setShowCreateDialog(true)}>
					<Plus className="mr-2 h-4 w-4" />
					T·∫°o ƒê·∫∑t Tr∆∞·ªõc
				</Button> */}
			</div>

			{/* Statistics Cards */}
			<ReservationStats stats={stats} />

			{/* Warning Banner khi c√≥ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n */}
			{hasExpiredReservations && (
				<Card className="border-red-200 bg-red-50 ">
					<CardContent className="">
						<div className="flex items-center space-x-3">
							<div className="flex-shrink-0">
								<svg
									className="h-6 w-6 text-red-600"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										strokeLinecap="round"
										strokeLinejoin="round"
										strokeWidth={2}
										d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
									/>
								</svg>
							</div>
							<div className="flex-1">
								<h3 className="text-lg font-semibold text-red-800">
									‚ö†Ô∏è C√≥ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n!
								</h3>
								<p className="text-red-700">
									B·∫°n ph·∫£i h·ªßy h·∫øt t·∫•t c·∫£ ƒë·∫∑t tr∆∞·ªõc qu√° h·∫°n tr∆∞·ªõc khi c√≥ th·ªÉ
									thao t√°c v·ªõi c√°c ƒë·∫∑t tr∆∞·ªõc c√≤n h·∫°n.
								</p>
							</div>
						</div>
					</CardContent>
				</Card>
			)}

			{/* Main Content */}
			<ReservationTabs
				activeTab={activeTab}
				onTabChange={setActiveTab}
				searchQuery={searchQuery}
				selectedStatus={selectedStatus}
				onSearchChange={handleSearch}
				onStatusChange={handleStatusFilter}
				reservations={reservations}
				expiringSoonReservations={expiringSoonReservations}
				isLoadingReservations={isLoadingReservations}
				isFulfillPending={fulfillReservationMutation.isPending}
				isCancelPending={cancelReservationMutation.isPending}
				isDeletePending={deleteReservationMutation.isPending}
				isApproving={isApproving}
				onFulfill={handleFulfillReservation}
				onCancel={handleCancelReservationExpiring}
				onDelete={handleDeleteReservation}
				onViewDetails={handleViewDetails}
				onViewDetailsExpiring={handleViewDetailsExpiring}
				onExpire={handleExpireReservation}
				isBlockedByExpiredReservations={isBlockedByExpiredReservations}
			/>

			{/* Create Reservation Dialog */}
			<CreateReservationDialog
				open={showCreateDialog}
				onOpenChange={setShowCreateDialog}
				onSubmit={handleCreateReservation}
				isLoading={createReservationMutation.isPending}
			/>

			{/* Delete Reservation Dialog */}
			<DeleteReservationDialog
				open={showDeleteDialog}
				onOpenChange={setShowDeleteDialog}
				reservation={reservationToDelete}
				onConfirm={confirmDeleteReservation}
				isLoading={deleteReservationMutation.isPending}
			/>

			{/* Reservation Details Dialog */}
			<ReservationDetailsDialog
				open={showDetailsDialog}
				onOpenChange={setShowDetailsDialog}
				reservationId={selectedReservationId}
			/>
		</div>
	);
}
